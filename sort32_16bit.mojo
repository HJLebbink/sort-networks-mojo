from utils.static_tuple import StaticTuple
from sort_tools import Swaps, SwapData, gen_perm, gen_merge_mask


# Sorting network for 32 inputs, 185 CEs, 14 layers:
# [(0,1),(2,3),(4,5),(6,7),(8,9),(10,11),(12,13),(14,15),(16,17),(18,19),(20,21),(22,23),(24,25),(26,27),(28,29),(30,31)]
# [(0,2),(1,3),(4,6),(5,7),(8,10),(9,11),(12,14),(13,15),(16,18),(17,19),(20,22),(21,23),(24,26),(25,27),(28,30),(29,31)]
# [(0,4),(1,5),(2,6),(3,7),(8,12),(9,13),(10,14),(11,15),(16,20),(17,21),(18,22),(19,23),(24,28),(25,29),(26,30),(27,31)]
# [(0,8),(1,9),(2,10),(3,11),(4,12),(5,13),(6,14),(7,15),(16,24),(17,25),(18,26),(19,27),(20,28),(21,29),(22,30),(23,31)]
# [(0,16),(1,8),(2,4),(3,12),(5,10),(6,9),(7,14),(11,13),(15,31),(17,24),(18,20),(19,28),(21,26),(22,25),(23,30),(27,29)]
# [(1,2),(3,5),(4,8),(6,22),(7,11),(9,25),(10,12),(13,14),(17,18),(19,21),(20,24),(23,27),(26,28),(29,30)]
# [(1,17),(2,18),(3,19),(4,20),(5,10),(7,23),(8,24),(11,27),(12,28),(13,29),(14,30),(21,26)]
# [(3,17),(4,16),(5,21),(6,18),(7,9),(8,20),(10,26),(11,23),(13,25),(14,28),(15,27),(22,24)]
# [(1,4),(3,8),(5,16),(7,17),(9,21),(10,22),(11,19),(12,20),(14,24),(15,26),(23,28),(27,30)]
# [(2,5),(7,8),(9,18),(11,17),(12,16),(13,22),(14,20),(15,19),(23,24),(26,29)]
# [(2,4),(6,12),(9,16),(10,11),(13,17),(14,18),(15,22),(19,25),(20,21),(27,29)]
# [(5,6),(8,12),(9,10),(11,13),(14,16),(15,17),(18,20),(19,23),(21,22),(25,26)]
# [(3,5),(6,7),(8,9),(10,12),(11,14),(13,16),(15,18),(17,20),(19,21),(22,23),(24,25),(26,28)]
# [(3,4),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22),(23,24),(25,26),(27,28)]
alias swap32: SwapData = VariadicList(
    VariadicList(
        (0, 1),
        (2, 3),
        (4, 5),
        (6, 7),
        (8, 9),
        (10, 11),
        (12, 13),
        (14, 15),
        (16, 17),
        (18, 19),
        (20, 21),
        (22, 23),
        (24, 25),
        (26, 27),
        (28, 29),
        (30, 31),
    ),
    VariadicList(
        (0, 2),
        (1, 3),
        (4, 6),
        (5, 7),
        (8, 10),
        (9, 11),
        (12, 14),
        (13, 15),
        (16, 18),
        (17, 19),
        (20, 22),
        (21, 23),
        (24, 26),
        (25, 27),
        (28, 30),
        (29, 31),
    ),
    VariadicList(
        (0, 4),
        (1, 5),
        (2, 6),
        (3, 7),
        (8, 12),
        (9, 13),
        (10, 14),
        (11, 15),
        (16, 20),
        (17, 21),
        (18, 22),
        (19, 23),
        (24, 28),
        (25, 29),
        (26, 30),
        (27, 31),
    ),
    VariadicList(
        (0, 8),
        (1, 9),
        (2, 10),
        (3, 11),
        (4, 12),
        (5, 13),
        (6, 14),
        (7, 15),
        (16, 24),
        (17, 25),
        (18, 26),
        (19, 27),
        (20, 28),
        (21, 29),
        (22, 30),
        (23, 31),
    ),
    VariadicList(
        (0, 16),
        (1, 8),
        (2, 4),
        (3, 12),
        (5, 10),
        (6, 9),
        (7, 14),
        (11, 13),
        (15, 31),
        (17, 24),
        (18, 20),
        (19, 28),
        (21, 26),
        (22, 25),
        (23, 30),
        (27, 29),
    ),
    VariadicList(
        (1, 2),
        (3, 5),
        (4, 8),
        (6, 22),
        (7, 11),
        (9, 25),
        (10, 12),
        (13, 14),
        (17, 18),
        (19, 21),
        (20, 24),
        (23, 27),
        (26, 28),
        (29, 30),
    ),
    VariadicList(
        (1, 17),
        (2, 18),
        (3, 19),
        (4, 20),
        (5, 10),
        (7, 23),
        (8, 24),
        (11, 27),
        (12, 28),
        (13, 29),
        (14, 30),
        (21, 26),
    ),
    VariadicList(
        (3, 17),
        (4, 16),
        (5, 21),
        (6, 18),
        (7, 9),
        (8, 20),
        (10, 26),
        (11, 23),
        (13, 25),
        (14, 28),
        (15, 27),
        (22, 24),
    ),
    VariadicList(
        (1, 4),
        (3, 8),
        (5, 16),
        (7, 17),
        (9, 21),
        (10, 22),
        (11, 19),
        (12, 20),
        (14, 24),
        (15, 26),
        (23, 28),
        (27, 30),
    ),
    VariadicList(
        (2, 5),
        (7, 8),
        (9, 18),
        (11, 17),
        (12, 16),
        (13, 22),
        (14, 20),
        (15, 19),
        (23, 24),
        (26, 29),
    ),
    VariadicList(
        (2, 4),
        (6, 12),
        (9, 16),
        (10, 11),
        (13, 17),
        (14, 18),
        (15, 22),
        (19, 25),
        (20, 21),
        (27, 29),
    ),
    VariadicList(
        (5, 6),
        (8, 12),
        (9, 10),
        (11, 13),
        (14, 16),
        (15, 17),
        (18, 20),
        (19, 23),
        (21, 22),
        (25, 26),
    ),
    VariadicList(
        (3, 5),
        (6, 7),
        (8, 9),
        (10, 12),
        (11, 14),
        (13, 16),
        (15, 18),
        (17, 20),
        (19, 21),
        (22, 23),
        (24, 25),
        (26, 28),
    ),
    VariadicList(
        (3, 4),
        (5, 6),
        (7, 8),
        (9, 10),
        (11, 12),
        (13, 14),
        (15, 16),
        (17, 18),
        (19, 20),
        (21, 22),
        (23, 24),
        (25, 26),
        (27, 28),
    ),
)


@always_inline
fn swap[T: DType, swaps: Swaps, assending: Bool](v: SIMD[T, 32]) -> SIMD[T, 32]:
    alias p = gen_perm[swaps, 32]()
    alias merge_mask = gen_merge_mask[swaps, 32]()

    let v2 = v.shuffle[
        p[0],
        p[1],
        p[2],
        p[3],
        p[4],
        p[5],
        p[6],
        p[7],
        p[8],
        p[9],
        p[10],
        p[11],
        p[12],
        p[13],
        p[14],
        p[15],
        p[16],
        p[17],
        p[18],
        p[19],
        p[20],
        p[21],
        p[22],
        p[23],
        p[24],
        p[25],
        p[26],
        p[27],
        p[28],
        p[29],
        p[30],
        p[31],
    ]()

    @parameter
    if assending:
        return merge_mask.select(v.min(v2), v.max(v2))
    else:
        return merge_mask.select(v.max(v2), v.min(v2))


# sort SIMD array v
fn sort32_16bit[T: DType, assending: Bool = True](v: SIMD[T, 32]) -> SIMD[T, 32]:
    let v0 = swap[T, swap32[0], assending](v)
    let v1 = swap[T, swap32[1], assending](v0)
    let v2 = swap[T, swap32[2], assending](v1)
    let v3 = swap[T, swap32[3], assending](v2)
    let v4 = swap[T, swap32[4], assending](v3)
    let v5 = swap[T, swap32[5], assending](v4)
    let v6 = swap[T, swap32[6], assending](v5)
    let v7 = swap[T, swap32[7], assending](v6)
    let v8 = swap[T, swap32[8], assending](v7)
    let v9 = swap[T, swap32[9], assending](v8)
    let v10 = swap[T, swap32[10], assending](v9)
    let v11 = swap[T, swap32[11], assending](v10)
    let v12 = swap[T, swap32[12], assending](v11)
    let v13 = swap[T, swap32[13], assending](v12)
    return v13
